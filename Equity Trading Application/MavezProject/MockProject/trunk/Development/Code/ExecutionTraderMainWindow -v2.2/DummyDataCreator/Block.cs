//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace DummyDataCreator
{
    public partial class Block
    {
        #region Primitive Properties
    
        public virtual int BlockID
        {
            get;
            set;
        }
    
        public virtual int TraderID
        {
            get;
            set;
        }
    
        public virtual int SecurityID
        {
            get { return _securityID; }
            set
            {
                if (_securityID != value)
                {
                    if (Security != null && Security.SecurityID != value)
                    {
                        Security = null;
                    }
                    _securityID = value;
                }
            }
        }
        private int _securityID;
    
        public virtual string BlockSide
        {
            get;
            set;
        }
    
        public virtual int BlockStatus
        {
            get;
            set;
        }
    
        public virtual decimal LimitPrice
        {
            get;
            set;
        }
    
        public virtual decimal StopPrice
        {
            get;
            set;
        }
    
        public virtual int TotalQuantity
        {
            get;
            set;
        }
    
        public virtual int ExecutedQuantity
        {
            get;
            set;
        }
    
        public virtual int OpenQuantity
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Security Security
        {
            get { return _security; }
            set
            {
                if (!ReferenceEquals(_security, value))
                {
                    var previousValue = _security;
                    _security = value;
                    FixupSecurity(previousValue);
                }
            }
        }
        private Security _security;
    
        public virtual ICollection<ExecutedBlock> ExecutedBlocks
        {
            get
            {
                if (_executedBlocks == null)
                {
                    var newCollection = new FixupCollection<ExecutedBlock>();
                    newCollection.CollectionChanged += FixupExecutedBlocks;
                    _executedBlocks = newCollection;
                }
                return _executedBlocks;
            }
            set
            {
                if (!ReferenceEquals(_executedBlocks, value))
                {
                    var previousValue = _executedBlocks as FixupCollection<ExecutedBlock>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupExecutedBlocks;
                    }
                    _executedBlocks = value;
                    var newValue = value as FixupCollection<ExecutedBlock>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupExecutedBlocks;
                    }
                }
            }
        }
        private ICollection<ExecutedBlock> _executedBlocks;
    
        public virtual ICollection<OrderAllocation> OrderAllocations
        {
            get
            {
                if (_orderAllocations == null)
                {
                    var newCollection = new FixupCollection<OrderAllocation>();
                    newCollection.CollectionChanged += FixupOrderAllocations;
                    _orderAllocations = newCollection;
                }
                return _orderAllocations;
            }
            set
            {
                if (!ReferenceEquals(_orderAllocations, value))
                {
                    var previousValue = _orderAllocations as FixupCollection<OrderAllocation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupOrderAllocations;
                    }
                    _orderAllocations = value;
                    var newValue = value as FixupCollection<OrderAllocation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupOrderAllocations;
                    }
                }
            }
        }
        private ICollection<OrderAllocation> _orderAllocations;
    
        public virtual ICollection<Order> Orders
        {
            get
            {
                if (_orders == null)
                {
                    var newCollection = new FixupCollection<Order>();
                    newCollection.CollectionChanged += FixupOrders;
                    _orders = newCollection;
                }
                return _orders;
            }
            set
            {
                if (!ReferenceEquals(_orders, value))
                {
                    var previousValue = _orders as FixupCollection<Order>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupOrders;
                    }
                    _orders = value;
                    var newValue = value as FixupCollection<Order>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupOrders;
                    }
                }
            }
        }
        private ICollection<Order> _orders;

        #endregion
        #region Association Fixup
    
        private void FixupSecurity(Security previousValue)
        {
            if (previousValue != null && previousValue.Blocks.Contains(this))
            {
                previousValue.Blocks.Remove(this);
            }
    
            if (Security != null)
            {
                if (!Security.Blocks.Contains(this))
                {
                    Security.Blocks.Add(this);
                }
                if (SecurityID != Security.SecurityID)
                {
                    SecurityID = Security.SecurityID;
                }
            }
        }
    
        private void FixupExecutedBlocks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ExecutedBlock item in e.NewItems)
                {
                    item.Block = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ExecutedBlock item in e.OldItems)
                {
                    if (ReferenceEquals(item.Block, this))
                    {
                        item.Block = null;
                    }
                }
            }
        }
    
        private void FixupOrderAllocations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (OrderAllocation item in e.NewItems)
                {
                    item.Block = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OrderAllocation item in e.OldItems)
                {
                    if (ReferenceEquals(item.Block, this))
                    {
                        item.Block = null;
                    }
                }
            }
        }
    
        private void FixupOrders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Order item in e.NewItems)
                {
                    item.Block = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Order item in e.OldItems)
                {
                    if (ReferenceEquals(item.Block, this))
                    {
                        item.Block = null;
                    }
                }
            }
        }

        #endregion
    }
}
