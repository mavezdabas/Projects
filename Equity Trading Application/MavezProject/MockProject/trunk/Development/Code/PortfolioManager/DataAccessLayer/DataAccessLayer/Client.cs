//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace DataAccessLayer
{
    public partial class Client
    {
        #region Primitive Properties
    
        public virtual int ClientID
        {
            get;
            set;
        }
    
        public virtual string ClientName
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Order> Orders
        {
            get
            {
                if (_orders == null)
                {
                    var newCollection = new FixupCollection<Order>();
                    newCollection.CollectionChanged += FixupOrders;
                    _orders = newCollection;
                }
                return _orders;
            }
            set
            {
                if (!ReferenceEquals(_orders, value))
                {
                    var previousValue = _orders as FixupCollection<Order>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupOrders;
                    }
                    _orders = value;
                    var newValue = value as FixupCollection<Order>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupOrders;
                    }
                }
            }
        }
        private ICollection<Order> _orders;
    
        public virtual ICollection<Portfolio> Portfolios
        {
            get
            {
                if (_portfolios == null)
                {
                    var newCollection = new FixupCollection<Portfolio>();
                    newCollection.CollectionChanged += FixupPortfolios;
                    _portfolios = newCollection;
                }
                return _portfolios;
            }
            set
            {
                if (!ReferenceEquals(_portfolios, value))
                {
                    var previousValue = _portfolios as FixupCollection<Portfolio>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPortfolios;
                    }
                    _portfolios = value;
                    var newValue = value as FixupCollection<Portfolio>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPortfolios;
                    }
                }
            }
        }
        private ICollection<Portfolio> _portfolios;

        #endregion
        #region Association Fixup
    
        private void FixupOrders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Order item in e.NewItems)
                {
                    item.Client = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Order item in e.OldItems)
                {
                    if (ReferenceEquals(item.Client, this))
                    {
                        item.Client = null;
                    }
                }
            }
        }
    
        private void FixupPortfolios(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Portfolio item in e.NewItems)
                {
                    item.Client = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Portfolio item in e.OldItems)
                {
                    if (ReferenceEquals(item.Client, this))
                    {
                        item.Client = null;
                    }
                }
            }
        }

        #endregion
    }
}
