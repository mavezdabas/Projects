using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Collections.ObjectModel;
using DataAccessLayer;
using AutoMapper;
using System.Windows.Input;
using EquityTradingApplication.Commands;
using EquityTradingApplication.Helpers;
using System.Windows;
using log4net.Config;
using log4net;
using EquityTradingApplication.ApplicationHelper;
using System.Windows.Controls;
using EquityTradingApplication.Converters;
using System.Reflection;

namespace EquityTradingApplication.ViewModels
{
    public class PortfolioViewModel : ViewModelBase
    {
        private IPortfolioDAL dalObject;
        ClientModel clientModel;
        IModelDialogService dialogService;
        private OrderViewModel orderViewModel;

        public event Action graphEvent;
        public event Action allEvent;
        public event Action newEvent;

        public event Action switchList;

        public ObservableCollection<OrderViewModel> TotalOrders { get; set; }

        public ObservableCollection<OrderViewModel> NewList { get; set; }
        public ObservableCollection<OrderViewModel> OpenList { get; set; }

        //  public ObservableCollection<DetailsForPM> SearchList { get; set; }

        public ObservableCollection<OrderModel> OrderUpdatedList { get; set; }
        //  public ObservableCollection<OrderModel> OrderDeletedList { get; set; }
        public ObservableCollection<OrderViewModel> OrderViewList { get; set; }

        public PortfolioViewModel(ClientModel c)
        {
            RadioAllButton = true;
            Mapper.CreateMap<Order, OrderModel>();
            Mapper.CreateMap<OrderModel, Order>();
            clientModel = c;
            OrderViewList = new ObservableCollection<OrderViewModel>();
            OrderUpdatedList = new ObservableCollection<OrderModel>();
            // OrderDeletedList = new ObservableCollection<OrderModel>();
            dalObject = new PortfolioDAL();
            dialogService = new ModelDialogService();
         
            NewList = new ObservableCollection<OrderViewModel>();
            OpenList = new ObservableCollection<OrderViewModel>();

            TotalOrders = new ObservableCollection<OrderViewModel>();
            try
            {
                LoadAllOrders();
            }
            catch(NullReferenceException e)
            {
                 new ExceptionHandler(codes.NullCode);
            }
             // MessageBox.Show("jghilu");
            // LoadSecurityName();
            XmlConfigurator.Configure();
            log4net.Config.BasicConfigurator.Configure();
            log4net.ILog log = log4net.LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);
            log.Debug("Welcome to Log4Net by DOTNET BATCH");


        }
        private bool radioNewButton;

        public bool RadioNewButton
        {
            get { return radioNewButton; }
            set { radioNewButton = value; }
        }



        private bool radioOpenButton;

        public bool RadioOpenButton
        {
            get { return radioOpenButton; }
            set { radioOpenButton = value; }
        }


        private bool radioAllButton;

        public bool RadioAllButton
        {
            get { return radioAllButton; }
            set { radioAllButton = value; }
        }


        private bool sendBtnEnabled;

        public bool SendBtnEnabled
        {
            get { return sendBtnEnabled; }
            set
            {
                sendBtnEnabled = value;
                RaisePropertyChanged("SendBtnEnabled");
            }
        }

        private OrderViewModel selectedItem;
        public OrderViewModel SelectedItem
        {
            get
            {

                return selectedItem;
            }
            set
            {
                selectedItem = value;


                RaisePropertyChanged("SelectedItem");
            }
        }

        public void LoadAllOrders()
        {
            if (clientModel != null)
            {

                TotalOrders.Clear();
                OrderUpdatedList.Clear();
                var portfolio = dalObject.GetPortfolioByClientID(clientModel.ClientID);
                ApplicationState.SetValue("portfolioId", portfolio.PortfolioID);
                var orders = dalObject.GetAllOrdersByPortfolioID(portfolio.PortfolioID);

                foreach (var item in orders)
                {
                    //OrderList.Add(Mapper.Map<Order, OrderModel>(item));
                    //orderModel = new OrderModel();
                    // orderModel.OrderID = item.OrderID;
                    // orderModel.Side = item.Side;
                    // orderModel.SecurityID = item.SecurityID;
                    // String s = dalObject.GetSecurityNameByID(item.SecurityID);
                    //SecurityName = s;
                    orderViewModel = new OrderViewModel();
                    orderViewModel.OrderID = item.OrderID;
                    orderViewModel.Side = item.Side;
                    orderViewModel.OpenQuantity = item.OpenQuantity;
                    orderViewModel.StopPrice = item.StopPrice;
                    orderViewModel.LimitPrice = item.LimitPrice;
                    orderViewModel.Notes = item.Notes;
                    orderViewModel.Notify = item.Notify;
                    orderViewModel.SecurityID = item.SecurityID;
                    orderViewModel.OrderType = item.OrderType;
                    orderViewModel.OrderQualifier = item.OrderQualifier;
                    orderViewModel.AccountType = item.AccountType;
                    orderViewModel.StatusID = item.StatusID;


                    orderViewModel.SecurityName = dalObject.GetSecurityNameByID(item.SecurityID);
                    var securityObj = dalObject.GetSecurityByID(item.SecurityID);
                    orderViewModel.Symbol = securityObj.SecuritySymbol;
                    orderViewModel.StatusName = dalObject.GetStatusNameByID(item.StatusID);
                    TotalOrders.Add(orderViewModel);
                    OrderUpdatedList.Add(Mapper.Map<Order, OrderModel>(item));
                    //   OrderDeletedList.Add(Mapper.Map<Order,OrderModel>(item));
                }
            }


            OrderViewList.Clear();
            foreach (var item in TotalOrders)
            {
                OrderViewList.Add(item);
            }

        }
        private string searchText = null;
        public string SearchText
        {
            get { return searchText; }
            set
            {
                searchText = value;
                RaisePropertyChanged("SearchText");
            }
        }

        //private int orderID=1;
        public int OrderID
        {
            get { return orderViewModel.OrderID; }
            set
            {
                orderViewModel.OrderID = value;
                RaisePropertyChanged("OrderID");
            }
        }

        public string Side
        {
            get
            {
                return orderViewModel.Side;
            }
            set
            {
                orderViewModel.Side = value;

                RaisePropertyChanged("Side");
            }
        }

        //public int SecurityID
        //{
        //    get {
        //        MessageBox.Show(SecurityID.ToString());
        //        return orderModel.SecurityID; }
        //    set { orderModel.SecurityID = value;
        //    RaisePropertyChanged("SecurityID");

        //    }
        //}



        //private string security;
        public string SecurityName
        {
            get
            {
                return orderViewModel.SecurityName;
            }
            set
            {
                orderViewModel.SecurityName = value;
                RaisePropertyChanged("SecurityName");
            }
        }

        public decimal MarketPrice
        {
            get
            {
                return orderViewModel.MarketPrice;
            }
            set
            {
                orderViewModel.MarketPrice = value;
                RaisePropertyChanged("MarketPrice");
            }
        }


        public decimal Position
        {
            get
            {
                return orderViewModel.Position;
            }
            set
            {
                orderViewModel.Position = value;
                RaisePropertyChanged("Position");
            }
        }

        public string StatusName
        {
            get
            {
                return orderViewModel.StatusName;
            }
            set
            {
                orderViewModel.StatusName = value;
                RaisePropertyChanged("StatusName");
            }
        }
        //private void LoadSecurityName()
        //{

        //   security = dalObject.GetSecurityNameByID(SecurityID);
        //}

        public List<String> Strings { get; set; }

        private ICommand openCreateOrd;
        public ICommand OpenCreateOrder
        {
            get
            {
                if (openCreateOrd == null)
                    openCreateOrd = new RelayCommand(p => OpenCreate());
                return openCreateOrd;
            }

        }

        private void OpenCreate()
        {
            if (RadioNewButton == true)
            {
                 dialogService.ShowDialog<CreateOrderViewModel>(ViewType.CreateOrderView, null, () => New());
            }
            else if (RadioOpenButton == true)
            {
                 dialogService.ShowDialog<CreateOrderViewModel>(ViewType.CreateOrderView, null, () => Open());
            }
            else
            { 
             if(RadioAllButton== true)
                 dialogService.ShowDialog<CreateOrderViewModel>(ViewType.CreateOrderView, null, () => LoadAllOrders());
            }
            
            
           
        }

        private ICommand newCommand;
        public ICommand NewCommand
        {
            get
            {
                if (newCommand == null)
                    newCommand = new RelayCommand(p => New());
                return newCommand;
            }

        }

        private ICommand deleteCommand;
        public ICommand DeleteCommand
        {
            get
            {
                if (deleteCommand == null)
                    deleteCommand = new RelayCommand(p => Delete());
                return deleteCommand;
            }

        }

        private ICommand openCommand;
        public ICommand OpenCommand
        {
            get
            {
                if (openCommand == null)
                    openCommand = new RelayCommand(p => Open());
                return openCommand;
            }

        }

        private ICommand allCommand;
        public ICommand AllCommand
        {
            get
            {
                if (allCommand == null)
                    allCommand = new RelayCommand(p => All());
                return allCommand;
            }

        }

        private ICommand searchCommand;
        public ICommand SearchCommand
        {
            get
            {
                if (searchCommand == null)
                    searchCommand = new RelayCommand(p => Search());
                return searchCommand;
            }
        }

        private ICommand sendCommand;
        public ICommand SendCommand
        {
            get
            {
                if (sendCommand == null)
                    sendCommand = new RelayCommand(p => Send());
                return sendCommand;
            }
        }

        private void Send()
        {
            int count = 0;

            //  for (int i=0, j = 0; i < OrderViewList.Count; i++,j++)


            foreach (var item in OrderViewList)
            {

                foreach (var item1 in OrderUpdatedList)
                {

                    if (item.IsSelected == true && item.OrderID == item1.OrderID)
                    {
                        item.StatusName = "OPEN";
                        int id = dalObject.GetStatusIdByName(item.StatusName);
                        item1.StatusID = id;
                        dalObject.UpdateOrder(Mapper.Map<OrderModel, Order>(item1));
                        count++;

                    }

                }

            }
           // New();

        //    LoadAllOrders();

            MessageBox.Show(count.ToString());
        }

        private void Search()
        {
            OrderViewList.Clear();
            foreach (var item in TotalOrders)
            {
                if (SearchText == item.SecurityName)
                {
                    OrderViewList.Add(item);
                }
            }
        }

        private ICommand openGraph;
        public ICommand OpenGraph
        {
            get
            {
                if (openGraph == null)
                    openGraph = new RelayCommand(p => OpenGraphWindow());
                return openGraph;
            }
            set { openGraph = value; }
        }

        private void OpenGraphWindow()
        {
            //GraphViewModel graph = new GraphViewModel();
            dialogService.ShowDialog<GraphViewModel>(ViewType.GraphView, null, null);
        }

        private ICommand viewOrderCommand;
        public ICommand ViewOrderCommand
        {
            get
            {
                if (viewOrderCommand == null)
                    viewOrderCommand = new RelayCommand(p => ViewOrder());
                return viewOrderCommand;
            }
        }

        private void ViewOrder()
        {
            OrderModel orderModel = new OrderModel()
            {

                OrderID = selectedItem.OrderID,
                SecurityID = selectedItem.SecurityID,
                Side = selectedItem.Side,
                OrderType = selectedItem.OrderType,
                OrderQualifier = selectedItem.OrderQualifier,
                AccountType = selectedItem.AccountType,
                OpenQuantity = selectedItem.OpenQuantity,
                StopPrice = selectedItem.StopPrice,
                LimitPrice = selectedItem.LimitPrice,
                Notes = selectedItem.Notes,
                Notify = selectedItem.Notify,
                StatusID = selectedItem.StatusID
            };

            ViewEquityOrderViewModel viewEquityOrderViewModel = new ViewEquityOrderViewModel(orderModel);
            dialogService.ShowDialog<ViewEquityOrderViewModel>(ViewType.ViewOrderView, viewEquityOrderViewModel, LoadAllOrders);
        }

        private void Open()
        {
            LoadAllOrders();
            OrderViewList.Clear();
            foreach (var item in TotalOrders)
            {
                if (item.StatusName == "OPEN")
                    OrderViewList.Add(item);
            }
        }

        private void All()
        {
            LoadAllOrders();
            OrderViewList.Clear();
            foreach (var item in TotalOrders)
            {
                OrderViewList.Add(item);
            }
        }

        private void New()
        {
            LoadAllOrders();
            OrderViewList.Clear();
            foreach (var item in TotalOrders)
            {
                if (item.StatusName == "NEW")
                    OrderViewList.Add(item);
            }

            //OrderUpdatedList.Clear();
            //foreach (var item in OrderUpdatedList)
            //{
            //    var statusId = item.StatusID;
            //    string sName = dalObject.GetStatusNameByID(statusId);
            //    if (sName == "NEW")
            //        OrderUpdatedList.Add(item);
            //}

        }

   //     public Radio SelectedRadioButton { get; set; }

        //private Radio selectedRadioButton;

        //public Radio SelectedRadioButton
        //{
        //    get { return selectedRadioButton; }
        //    set { selectedRadioButton = value;
        //    RaisePropertyChanged("SelectedRadioButton");
        //    }
        //}
        
     

        private void Delete()
        {
            // OrderViewList.Clear();
            //foreach (var item in TotalOrders)
            //{
            //    if(item.IsSelected==false)
            //    OrderViewList.Add(item);
            //}

            //RadioButton r = new RadioButton();
            //var res = p as StackPanel;
            //if (res.IsAncestorOf(r))
            //{
              
            //}
         


            foreach (var item in OrderViewList)
            {

                foreach (var item1 in OrderUpdatedList)
                {

                    if (item.IsSelected == true && item.OrderID == item1.OrderID)
                    {
                        // item.StatusName = "OPEN";
                        // int id = dalObject.GetStatusIdByName(item.StatusName);
                        // item1.StatusID = id;
                        dalObject.DeleteOrder(Mapper.Map<OrderModel, Order>(item1));

                        //  count++;

                    }

                }

            }
            if (RadioNewButton==true)
            {
                New();
            }

            if (RadioOpenButton== true)
            {
                Open();
            }

            if (RadioAllButton==true)
            {
                All();
            }

           // LoadAllOrders();
            //if(res.Name=="rBtnNew")
            //New();
            //if (res.Name == "rBtnOpen")
            //    Open();
            //if (res.Name == "rBtnAll")

            //    All();
        }
    }
}
