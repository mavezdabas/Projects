#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer.DBML
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MasterDataManagement")]
	public partial class MDMDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBusinessMapping(BusinessMapping instance);
    partial void UpdateBusinessMapping(BusinessMapping instance);
    partial void DeleteBusinessMapping(BusinessMapping instance);
    partial void InsertCommodityType(CommodityType instance);
    partial void UpdateCommodityType(CommodityType instance);
    partial void DeleteCommodityType(CommodityType instance);
    partial void InsertCurrency(Currency instance);
    partial void UpdateCurrency(Currency instance);
    partial void DeleteCurrency(Currency instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertMarket(Market instance);
    partial void UpdateMarket(Market instance);
    partial void DeleteMarket(Market instance);
    partial void InsertMarketCommodityMap(MarketCommodityMap instance);
    partial void UpdateMarketCommodityMap(MarketCommodityMap instance);
    partial void DeleteMarketCommodityMap(MarketCommodityMap instance);
    partial void InsertSourceSystem(SourceSystem instance);
    partial void UpdateSourceSystem(SourceSystem instance);
    partial void DeleteSourceSystem(SourceSystem instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public MDMDataContext() : 
				base(global::DataAccessLayer.Properties.Settings.Default.MasterDataManagementConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public MDMDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MDMDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MDMDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MDMDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BusinessMapping> BusinessMappings
		{
			get
			{
				return this.GetTable<BusinessMapping>();
			}
		}
		
		public System.Data.Linq.Table<CommodityType> CommodityTypes
		{
			get
			{
				return this.GetTable<CommodityType>();
			}
		}
		
		public System.Data.Linq.Table<Currency> Currencies
		{
			get
			{
				return this.GetTable<Currency>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<Market> Markets
		{
			get
			{
				return this.GetTable<Market>();
			}
		}
		
		public System.Data.Linq.Table<MarketCommodityMap> MarketCommodityMaps
		{
			get
			{
				return this.GetTable<MarketCommodityMap>();
			}
		}
		
		public System.Data.Linq.Table<SourceSystem> SourceSystems
		{
			get
			{
				return this.GetTable<SourceSystem>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BusinessMapping")]
	public partial class BusinessMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _EntityType;
		
		private int _EntityId;
		
		private int _MappingID;
		
		private string _MappingString;
		
		private string _MappingDescription;
		
		private System.DateTime _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private int _SourceSystemID;
		
		private bool _IsEnabledFlag;
		
		private System.Nullable<bool> _IsDefaultMapping;
		
		private int _LastUpdatedBy;
		
		private System.Nullable<System.DateTime> _LastUpdatedDate;
		
		private EntityRef<SourceSystem> _SourceSystem;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityTypeChanging(string value);
    partial void OnEntityTypeChanged();
    partial void OnEntityIdChanging(int value);
    partial void OnEntityIdChanged();
    partial void OnMappingIDChanging(int value);
    partial void OnMappingIDChanged();
    partial void OnMappingStringChanging(string value);
    partial void OnMappingStringChanged();
    partial void OnMappingDescriptionChanging(string value);
    partial void OnMappingDescriptionChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnSourceSystemIDChanging(int value);
    partial void OnSourceSystemIDChanged();
    partial void OnIsEnabledFlagChanging(bool value);
    partial void OnIsEnabledFlagChanged();
    partial void OnIsDefaultMappingChanging(System.Nullable<bool> value);
    partial void OnIsDefaultMappingChanged();
    partial void OnLastUpdatedByChanging(int value);
    partial void OnLastUpdatedByChanged();
    partial void OnLastUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdatedDateChanged();
    #endregion
		
		public BusinessMapping()
		{
			this._SourceSystem = default(EntityRef<SourceSystem>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityType", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string EntityType
		{
			get
			{
				return this._EntityType;
			}
			set
			{
				if ((this._EntityType != value))
				{
					this.OnEntityTypeChanging(value);
					this.SendPropertyChanging();
					this._EntityType = value;
					this.SendPropertyChanged("EntityType");
					this.OnEntityTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityId", DbType="Int NOT NULL")]
		public int EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MappingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MappingID
		{
			get
			{
				return this._MappingID;
			}
			set
			{
				if ((this._MappingID != value))
				{
					this.OnMappingIDChanging(value);
					this.SendPropertyChanging();
					this._MappingID = value;
					this.SendPropertyChanged("MappingID");
					this.OnMappingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MappingString", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string MappingString
		{
			get
			{
				return this._MappingString;
			}
			set
			{
				if ((this._MappingString != value))
				{
					this.OnMappingStringChanging(value);
					this.SendPropertyChanging();
					this._MappingString = value;
					this.SendPropertyChanged("MappingString");
					this.OnMappingStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MappingDescription", DbType="NVarChar(MAX)")]
		public string MappingDescription
		{
			get
			{
				return this._MappingDescription;
			}
			set
			{
				if ((this._MappingDescription != value))
				{
					this.OnMappingDescriptionChanging(value);
					this.SendPropertyChanging();
					this._MappingDescription = value;
					this.SendPropertyChanged("MappingDescription");
					this.OnMappingDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceSystemID", DbType="Int NOT NULL")]
		public int SourceSystemID
		{
			get
			{
				return this._SourceSystemID;
			}
			set
			{
				if ((this._SourceSystemID != value))
				{
					if (this._SourceSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceSystemIDChanging(value);
					this.SendPropertyChanging();
					this._SourceSystemID = value;
					this.SendPropertyChanged("SourceSystemID");
					this.OnSourceSystemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEnabledFlag", DbType="Bit NOT NULL")]
		public bool IsEnabledFlag
		{
			get
			{
				return this._IsEnabledFlag;
			}
			set
			{
				if ((this._IsEnabledFlag != value))
				{
					this.OnIsEnabledFlagChanging(value);
					this.SendPropertyChanging();
					this._IsEnabledFlag = value;
					this.SendPropertyChanged("IsEnabledFlag");
					this.OnIsEnabledFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDefaultMapping", DbType="Bit")]
		public System.Nullable<bool> IsDefaultMapping
		{
			get
			{
				return this._IsDefaultMapping;
			}
			set
			{
				if ((this._IsDefaultMapping != value))
				{
					this.OnIsDefaultMappingChanging(value);
					this.SendPropertyChanging();
					this._IsDefaultMapping = value;
					this.SendPropertyChanged("IsDefaultMapping");
					this.OnIsDefaultMappingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedBy", DbType="Int NOT NULL")]
		public int LastUpdatedBy
		{
			get
			{
				return this._LastUpdatedBy;
			}
			set
			{
				if ((this._LastUpdatedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedBy = value;
					this.SendPropertyChanged("LastUpdatedBy");
					this.OnLastUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdatedDate
		{
			get
			{
				return this._LastUpdatedDate;
			}
			set
			{
				if ((this._LastUpdatedDate != value))
				{
					this.OnLastUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedDate = value;
					this.SendPropertyChanged("LastUpdatedDate");
					this.OnLastUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SourceSystem_BusinessMapping", Storage="_SourceSystem", ThisKey="SourceSystemID", OtherKey="SystemId", IsForeignKey=true)]
		public SourceSystem SourceSystem
		{
			get
			{
				return this._SourceSystem.Entity;
			}
			set
			{
				SourceSystem previousValue = this._SourceSystem.Entity;
				if (((previousValue != value) 
							|| (this._SourceSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SourceSystem.Entity = null;
						previousValue.BusinessMappings.Remove(this);
					}
					this._SourceSystem.Entity = value;
					if ((value != null))
					{
						value.BusinessMappings.Add(this);
						this._SourceSystemID = value.SystemId;
					}
					else
					{
						this._SourceSystemID = default(int);
					}
					this.SendPropertyChanged("SourceSystem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BusinessMapping", Storage="_User", ThisKey="LastUpdatedBy", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.BusinessMappings.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.BusinessMappings.Add(this);
						this._LastUpdatedBy = value.UserId;
					}
					else
					{
						this._LastUpdatedBy = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CommodityType")]
	public partial class CommodityType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommodityTypeId;
		
		private string _CommodityTypeName;
		
		private string _CommodityClass;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private int _Version;
		
		private int _LastUpdatedBy;
		
		private System.Nullable<System.DateTime> _LastUpdatedDate;
		
		private bool _IsCurrentVersion;
		
		private EntitySet<MarketCommodityMap> _MarketCommodityMaps;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommodityTypeIdChanging(int value);
    partial void OnCommodityTypeIdChanged();
    partial void OnCommodityTypeNameChanging(string value);
    partial void OnCommodityTypeNameChanged();
    partial void OnCommodityClassChanging(string value);
    partial void OnCommodityClassChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnLastUpdatedByChanging(int value);
    partial void OnLastUpdatedByChanged();
    partial void OnLastUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdatedDateChanged();
    partial void OnIsCurrentVersionChanging(bool value);
    partial void OnIsCurrentVersionChanged();
    #endregion
		
		public CommodityType()
		{
			this._MarketCommodityMaps = new EntitySet<MarketCommodityMap>(new Action<MarketCommodityMap>(this.attach_MarketCommodityMaps), new Action<MarketCommodityMap>(this.detach_MarketCommodityMaps));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommodityTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommodityTypeId
		{
			get
			{
				return this._CommodityTypeId;
			}
			set
			{
				if ((this._CommodityTypeId != value))
				{
					this.OnCommodityTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CommodityTypeId = value;
					this.SendPropertyChanged("CommodityTypeId");
					this.OnCommodityTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommodityTypeName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CommodityTypeName
		{
			get
			{
				return this._CommodityTypeName;
			}
			set
			{
				if ((this._CommodityTypeName != value))
				{
					this.OnCommodityTypeNameChanging(value);
					this.SendPropertyChanging();
					this._CommodityTypeName = value;
					this.SendPropertyChanged("CommodityTypeName");
					this.OnCommodityTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommodityClass", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CommodityClass
		{
			get
			{
				return this._CommodityClass;
			}
			set
			{
				if ((this._CommodityClass != value))
				{
					this.OnCommodityClassChanging(value);
					this.SendPropertyChanging();
					this._CommodityClass = value;
					this.SendPropertyChanged("CommodityClass");
					this.OnCommodityClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedBy", DbType="Int NOT NULL")]
		public int LastUpdatedBy
		{
			get
			{
				return this._LastUpdatedBy;
			}
			set
			{
				if ((this._LastUpdatedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedBy = value;
					this.SendPropertyChanged("LastUpdatedBy");
					this.OnLastUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdatedDate
		{
			get
			{
				return this._LastUpdatedDate;
			}
			set
			{
				if ((this._LastUpdatedDate != value))
				{
					this.OnLastUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedDate = value;
					this.SendPropertyChanged("LastUpdatedDate");
					this.OnLastUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCurrentVersion", DbType="Bit NOT NULL")]
		public bool IsCurrentVersion
		{
			get
			{
				return this._IsCurrentVersion;
			}
			set
			{
				if ((this._IsCurrentVersion != value))
				{
					this.OnIsCurrentVersionChanging(value);
					this.SendPropertyChanging();
					this._IsCurrentVersion = value;
					this.SendPropertyChanged("IsCurrentVersion");
					this.OnIsCurrentVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CommodityType_MarketCommodityMap", Storage="_MarketCommodityMaps", ThisKey="CommodityTypeId", OtherKey="CommodityTypeId")]
		public EntitySet<MarketCommodityMap> MarketCommodityMaps
		{
			get
			{
				return this._MarketCommodityMaps;
			}
			set
			{
				this._MarketCommodityMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CommodityType", Storage="_User", ThisKey="LastUpdatedBy", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.CommodityTypes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.CommodityTypes.Add(this);
						this._LastUpdatedBy = value.UserId;
					}
					else
					{
						this._LastUpdatedBy = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MarketCommodityMaps(MarketCommodityMap entity)
		{
			this.SendPropertyChanging();
			entity.CommodityType = this;
		}
		
		private void detach_MarketCommodityMaps(MarketCommodityMap entity)
		{
			this.SendPropertyChanging();
			entity.CommodityType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Currency")]
	public partial class Currency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CurrencyId;
		
		private string _CurrencyName;
		
		private string _Description;
		
		private int _LastUpdatedBy;
		
		private System.Nullable<System.DateTime> _LastUpdatedDate;
		
		private EntitySet<Market> _Markets;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCurrencyIdChanging(int value);
    partial void OnCurrencyIdChanged();
    partial void OnCurrencyNameChanging(string value);
    partial void OnCurrencyNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLastUpdatedByChanging(int value);
    partial void OnLastUpdatedByChanged();
    partial void OnLastUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdatedDateChanged();
    #endregion
		
		public Currency()
		{
			this._Markets = new EntitySet<Market>(new Action<Market>(this.attach_Markets), new Action<Market>(this.detach_Markets));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CurrencyId
		{
			get
			{
				return this._CurrencyId;
			}
			set
			{
				if ((this._CurrencyId != value))
				{
					this.OnCurrencyIdChanging(value);
					this.SendPropertyChanging();
					this._CurrencyId = value;
					this.SendPropertyChanged("CurrencyId");
					this.OnCurrencyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CurrencyName
		{
			get
			{
				return this._CurrencyName;
			}
			set
			{
				if ((this._CurrencyName != value))
				{
					this.OnCurrencyNameChanging(value);
					this.SendPropertyChanging();
					this._CurrencyName = value;
					this.SendPropertyChanged("CurrencyName");
					this.OnCurrencyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedBy", DbType="Int NOT NULL")]
		public int LastUpdatedBy
		{
			get
			{
				return this._LastUpdatedBy;
			}
			set
			{
				if ((this._LastUpdatedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedBy = value;
					this.SendPropertyChanged("LastUpdatedBy");
					this.OnLastUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdatedDate
		{
			get
			{
				return this._LastUpdatedDate;
			}
			set
			{
				if ((this._LastUpdatedDate != value))
				{
					this.OnLastUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedDate = value;
					this.SendPropertyChanged("LastUpdatedDate");
					this.OnLastUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_Market", Storage="_Markets", ThisKey="CurrencyId", OtherKey="CurrencyId")]
		public EntitySet<Market> Markets
		{
			get
			{
				return this._Markets;
			}
			set
			{
				this._Markets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Currency", Storage="_User", ThisKey="LastUpdatedBy", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Currencies.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Currencies.Add(this);
						this._LastUpdatedBy = value.UserId;
					}
					else
					{
						this._LastUpdatedBy = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Markets(Market entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}
		
		private void detach_Markets(Market entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocationId;
		
		private string _LocationName;
		
		private string _Description;
		
		private int _LastUpdatedBy;
		
		private System.Nullable<System.DateTime> _LastUpdatedDate;
		
		private EntitySet<Market> _Markets;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIdChanging(int value);
    partial void OnLocationIdChanged();
    partial void OnLocationNameChanging(string value);
    partial void OnLocationNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLastUpdatedByChanging(int value);
    partial void OnLastUpdatedByChanged();
    partial void OnLastUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdatedDateChanged();
    #endregion
		
		public Location()
		{
			this._Markets = new EntitySet<Market>(new Action<Market>(this.attach_Markets), new Action<Market>(this.detach_Markets));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LocationName
		{
			get
			{
				return this._LocationName;
			}
			set
			{
				if ((this._LocationName != value))
				{
					this.OnLocationNameChanging(value);
					this.SendPropertyChanging();
					this._LocationName = value;
					this.SendPropertyChanged("LocationName");
					this.OnLocationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedBy", DbType="Int NOT NULL")]
		public int LastUpdatedBy
		{
			get
			{
				return this._LastUpdatedBy;
			}
			set
			{
				if ((this._LastUpdatedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedBy = value;
					this.SendPropertyChanged("LastUpdatedBy");
					this.OnLastUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdatedDate
		{
			get
			{
				return this._LastUpdatedDate;
			}
			set
			{
				if ((this._LastUpdatedDate != value))
				{
					this.OnLastUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedDate = value;
					this.SendPropertyChanged("LastUpdatedDate");
					this.OnLastUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Market", Storage="_Markets", ThisKey="LocationId", OtherKey="LocationId")]
		public EntitySet<Market> Markets
		{
			get
			{
				return this._Markets;
			}
			set
			{
				this._Markets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Location", Storage="_User", ThisKey="LastUpdatedBy", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Locations.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Locations.Add(this);
						this._LastUpdatedBy = value.UserId;
					}
					else
					{
						this._LastUpdatedBy = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Markets(Market entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Markets(Market entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Market")]
	public partial class Market : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MarketId;
		
		private string _MarketName;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private int _Version;
		
		private int _LastUpdatedBy;
		
		private System.Nullable<System.DateTime> _LastUpdatedDate;
		
		private bool _IsCurrentVersion;
		
		private int _LocationId;
		
		private int _CurrencyId;
		
		private EntitySet<MarketCommodityMap> _MarketCommodityMaps;
		
		private EntityRef<Currency> _Currency;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMarketIdChanging(int value);
    partial void OnMarketIdChanged();
    partial void OnMarketNameChanging(string value);
    partial void OnMarketNameChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnLastUpdatedByChanging(int value);
    partial void OnLastUpdatedByChanged();
    partial void OnLastUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdatedDateChanged();
    partial void OnIsCurrentVersionChanging(bool value);
    partial void OnIsCurrentVersionChanged();
    partial void OnLocationIdChanging(int value);
    partial void OnLocationIdChanged();
    partial void OnCurrencyIdChanging(int value);
    partial void OnCurrencyIdChanged();
    #endregion
		
		public Market()
		{
			this._MarketCommodityMaps = new EntitySet<MarketCommodityMap>(new Action<MarketCommodityMap>(this.attach_MarketCommodityMaps), new Action<MarketCommodityMap>(this.detach_MarketCommodityMaps));
			this._Currency = default(EntityRef<Currency>);
			this._Location = default(EntityRef<Location>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarketId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MarketId
		{
			get
			{
				return this._MarketId;
			}
			set
			{
				if ((this._MarketId != value))
				{
					this.OnMarketIdChanging(value);
					this.SendPropertyChanging();
					this._MarketId = value;
					this.SendPropertyChanged("MarketId");
					this.OnMarketIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarketName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MarketName
		{
			get
			{
				return this._MarketName;
			}
			set
			{
				if ((this._MarketName != value))
				{
					this.OnMarketNameChanging(value);
					this.SendPropertyChanging();
					this._MarketName = value;
					this.SendPropertyChanged("MarketName");
					this.OnMarketNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedBy", DbType="Int NOT NULL")]
		public int LastUpdatedBy
		{
			get
			{
				return this._LastUpdatedBy;
			}
			set
			{
				if ((this._LastUpdatedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedBy = value;
					this.SendPropertyChanged("LastUpdatedBy");
					this.OnLastUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdatedDate
		{
			get
			{
				return this._LastUpdatedDate;
			}
			set
			{
				if ((this._LastUpdatedDate != value))
				{
					this.OnLastUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedDate = value;
					this.SendPropertyChanged("LastUpdatedDate");
					this.OnLastUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCurrentVersion", DbType="Bit NOT NULL")]
		public bool IsCurrentVersion
		{
			get
			{
				return this._IsCurrentVersion;
			}
			set
			{
				if ((this._IsCurrentVersion != value))
				{
					this.OnIsCurrentVersionChanging(value);
					this.SendPropertyChanging();
					this._IsCurrentVersion = value;
					this.SendPropertyChanged("IsCurrentVersion");
					this.OnIsCurrentVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="Int NOT NULL")]
		public int LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyId", DbType="Int NOT NULL")]
		public int CurrencyId
		{
			get
			{
				return this._CurrencyId;
			}
			set
			{
				if ((this._CurrencyId != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrencyIdChanging(value);
					this.SendPropertyChanging();
					this._CurrencyId = value;
					this.SendPropertyChanged("CurrencyId");
					this.OnCurrencyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Market_MarketCommodityMap", Storage="_MarketCommodityMaps", ThisKey="MarketId", OtherKey="MarketId")]
		public EntitySet<MarketCommodityMap> MarketCommodityMaps
		{
			get
			{
				return this._MarketCommodityMaps;
			}
			set
			{
				this._MarketCommodityMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_Market", Storage="_Currency", ThisKey="CurrencyId", OtherKey="CurrencyId", IsForeignKey=true)]
		public Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				Currency previousValue = this._Currency.Entity;
				if (((previousValue != value) 
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.Markets.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.Markets.Add(this);
						this._CurrencyId = value.CurrencyId;
					}
					else
					{
						this._CurrencyId = default(int);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Market", Storage="_Location", ThisKey="LocationId", OtherKey="LocationId", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Markets.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Markets.Add(this);
						this._LocationId = value.LocationId;
					}
					else
					{
						this._LocationId = default(int);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Market", Storage="_User", ThisKey="LastUpdatedBy", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Markets.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Markets.Add(this);
						this._LastUpdatedBy = value.UserId;
					}
					else
					{
						this._LastUpdatedBy = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MarketCommodityMaps(MarketCommodityMap entity)
		{
			this.SendPropertyChanging();
			entity.Market = this;
		}
		
		private void detach_MarketCommodityMaps(MarketCommodityMap entity)
		{
			this.SendPropertyChanging();
			entity.Market = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MarketCommodityMap")]
	public partial class MarketCommodityMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MarketCommodityMapId;
		
		private int _MarketId;
		
		private int _CommodityTypeId;
		
		private EntityRef<CommodityType> _CommodityType;
		
		private EntityRef<Market> _Market;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMarketCommodityMapIdChanging(int value);
    partial void OnMarketCommodityMapIdChanged();
    partial void OnMarketIdChanging(int value);
    partial void OnMarketIdChanged();
    partial void OnCommodityTypeIdChanging(int value);
    partial void OnCommodityTypeIdChanged();
    #endregion
		
		public MarketCommodityMap()
		{
			this._CommodityType = default(EntityRef<CommodityType>);
			this._Market = default(EntityRef<Market>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarketCommodityMapId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MarketCommodityMapId
		{
			get
			{
				return this._MarketCommodityMapId;
			}
			set
			{
				if ((this._MarketCommodityMapId != value))
				{
					this.OnMarketCommodityMapIdChanging(value);
					this.SendPropertyChanging();
					this._MarketCommodityMapId = value;
					this.SendPropertyChanged("MarketCommodityMapId");
					this.OnMarketCommodityMapIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarketId", DbType="Int NOT NULL")]
		public int MarketId
		{
			get
			{
				return this._MarketId;
			}
			set
			{
				if ((this._MarketId != value))
				{
					if (this._Market.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMarketIdChanging(value);
					this.SendPropertyChanging();
					this._MarketId = value;
					this.SendPropertyChanged("MarketId");
					this.OnMarketIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommodityTypeId", DbType="Int NOT NULL")]
		public int CommodityTypeId
		{
			get
			{
				return this._CommodityTypeId;
			}
			set
			{
				if ((this._CommodityTypeId != value))
				{
					if (this._CommodityType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommodityTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CommodityTypeId = value;
					this.SendPropertyChanged("CommodityTypeId");
					this.OnCommodityTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CommodityType_MarketCommodityMap", Storage="_CommodityType", ThisKey="CommodityTypeId", OtherKey="CommodityTypeId", IsForeignKey=true)]
		public CommodityType CommodityType
		{
			get
			{
				return this._CommodityType.Entity;
			}
			set
			{
				CommodityType previousValue = this._CommodityType.Entity;
				if (((previousValue != value) 
							|| (this._CommodityType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommodityType.Entity = null;
						previousValue.MarketCommodityMaps.Remove(this);
					}
					this._CommodityType.Entity = value;
					if ((value != null))
					{
						value.MarketCommodityMaps.Add(this);
						this._CommodityTypeId = value.CommodityTypeId;
					}
					else
					{
						this._CommodityTypeId = default(int);
					}
					this.SendPropertyChanged("CommodityType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Market_MarketCommodityMap", Storage="_Market", ThisKey="MarketId", OtherKey="MarketId", IsForeignKey=true)]
		public Market Market
		{
			get
			{
				return this._Market.Entity;
			}
			set
			{
				Market previousValue = this._Market.Entity;
				if (((previousValue != value) 
							|| (this._Market.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Market.Entity = null;
						previousValue.MarketCommodityMaps.Remove(this);
					}
					this._Market.Entity = value;
					if ((value != null))
					{
						value.MarketCommodityMaps.Add(this);
						this._MarketId = value.MarketId;
					}
					else
					{
						this._MarketId = default(int);
					}
					this.SendPropertyChanged("Market");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SourceSystem")]
	public partial class SourceSystem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SystemId;
		
		private string _SystemName;
		
		private EntitySet<BusinessMapping> _BusinessMappings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSystemIdChanging(int value);
    partial void OnSystemIdChanged();
    partial void OnSystemNameChanging(string value);
    partial void OnSystemNameChanged();
    #endregion
		
		public SourceSystem()
		{
			this._BusinessMappings = new EntitySet<BusinessMapping>(new Action<BusinessMapping>(this.attach_BusinessMappings), new Action<BusinessMapping>(this.detach_BusinessMappings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SystemId
		{
			get
			{
				return this._SystemId;
			}
			set
			{
				if ((this._SystemId != value))
				{
					this.OnSystemIdChanging(value);
					this.SendPropertyChanging();
					this._SystemId = value;
					this.SendPropertyChanged("SystemId");
					this.OnSystemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string SystemName
		{
			get
			{
				return this._SystemName;
			}
			set
			{
				if ((this._SystemName != value))
				{
					this.OnSystemNameChanging(value);
					this.SendPropertyChanging();
					this._SystemName = value;
					this.SendPropertyChanged("SystemName");
					this.OnSystemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SourceSystem_BusinessMapping", Storage="_BusinessMappings", ThisKey="SystemId", OtherKey="SourceSystemID")]
		public EntitySet<BusinessMapping> BusinessMappings
		{
			get
			{
				return this._BusinessMappings;
			}
			set
			{
				this._BusinessMappings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BusinessMappings(BusinessMapping entity)
		{
			this.SendPropertyChanging();
			entity.SourceSystem = this;
		}
		
		private void detach_BusinessMappings(BusinessMapping entity)
		{
			this.SendPropertyChanging();
			entity.SourceSystem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _LoginId;
		
		private string _Password;
		
		private string _Name;
		
		private System.DateTime _DateOfBirth;
		
		private System.DateTime _DateOfJoining;
		
		private string _Role;
		
		private string _IsDeleted;
		
		private EntitySet<BusinessMapping> _BusinessMappings;
		
		private EntitySet<CommodityType> _CommodityTypes;
		
		private EntitySet<Currency> _Currencies;
		
		private EntitySet<Location> _Locations;
		
		private EntitySet<Market> _Markets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnLoginIdChanging(string value);
    partial void OnLoginIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    partial void OnDateOfJoiningChanging(System.DateTime value);
    partial void OnDateOfJoiningChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    partial void OnIsDeletedChanging(string value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public User()
		{
			this._BusinessMappings = new EntitySet<BusinessMapping>(new Action<BusinessMapping>(this.attach_BusinessMappings), new Action<BusinessMapping>(this.detach_BusinessMappings));
			this._CommodityTypes = new EntitySet<CommodityType>(new Action<CommodityType>(this.attach_CommodityTypes), new Action<CommodityType>(this.detach_CommodityTypes));
			this._Currencies = new EntitySet<Currency>(new Action<Currency>(this.attach_Currencies), new Action<Currency>(this.detach_Currencies));
			this._Locations = new EntitySet<Location>(new Action<Location>(this.attach_Locations), new Action<Location>(this.detach_Locations));
			this._Markets = new EntitySet<Market>(new Action<Market>(this.attach_Markets), new Action<Market>(this.detach_Markets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginId", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LoginId
		{
			get
			{
				return this._LoginId;
			}
			set
			{
				if ((this._LoginId != value))
				{
					this.OnLoginIdChanging(value);
					this.SendPropertyChanging();
					this._LoginId = value;
					this.SendPropertyChanged("LoginId");
					this.OnLoginIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfJoining", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfJoining
		{
			get
			{
				return this._DateOfJoining;
			}
			set
			{
				if ((this._DateOfJoining != value))
				{
					this.OnDateOfJoiningChanging(value);
					this.SendPropertyChanging();
					this._DateOfJoining = value;
					this.SendPropertyChanged("DateOfJoining");
					this.OnDateOfJoiningChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="NVarChar(10)")]
		public string IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BusinessMapping", Storage="_BusinessMappings", ThisKey="UserId", OtherKey="LastUpdatedBy")]
		public EntitySet<BusinessMapping> BusinessMappings
		{
			get
			{
				return this._BusinessMappings;
			}
			set
			{
				this._BusinessMappings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CommodityType", Storage="_CommodityTypes", ThisKey="UserId", OtherKey="LastUpdatedBy")]
		public EntitySet<CommodityType> CommodityTypes
		{
			get
			{
				return this._CommodityTypes;
			}
			set
			{
				this._CommodityTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Currency", Storage="_Currencies", ThisKey="UserId", OtherKey="LastUpdatedBy")]
		public EntitySet<Currency> Currencies
		{
			get
			{
				return this._Currencies;
			}
			set
			{
				this._Currencies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Location", Storage="_Locations", ThisKey="UserId", OtherKey="LastUpdatedBy")]
		public EntitySet<Location> Locations
		{
			get
			{
				return this._Locations;
			}
			set
			{
				this._Locations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Market", Storage="_Markets", ThisKey="UserId", OtherKey="LastUpdatedBy")]
		public EntitySet<Market> Markets
		{
			get
			{
				return this._Markets;
			}
			set
			{
				this._Markets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BusinessMappings(BusinessMapping entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_BusinessMappings(BusinessMapping entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_CommodityTypes(CommodityType entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_CommodityTypes(CommodityType entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Currencies(Currency entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Currencies(Currency entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Markets(Market entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Markets(Market entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
