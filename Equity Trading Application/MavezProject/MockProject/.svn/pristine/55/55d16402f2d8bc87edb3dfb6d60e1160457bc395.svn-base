//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;

namespace DataAccessLayer
{
    public partial class EquityTradingDBEntities : ObjectContext
    {
        public const string ConnectionString = "name=EquityTradingDBEntities";
        public const string ContainerName = "EquityTradingDBEntities";
    
        #region Constructors
    
        public EquityTradingDBEntities()
            : base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public EquityTradingDBEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public EquityTradingDBEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<AllocationMethod> AllocationMethods
        {
            get { return _allocationMethods  ?? (_allocationMethods = CreateObjectSet<AllocationMethod>("AllocationMethods")); }
        }
        private ObjectSet<AllocationMethod> _allocationMethods;
    
        public ObjectSet<Block> Blocks
        {
            get { return _blocks  ?? (_blocks = CreateObjectSet<Block>("Blocks")); }
        }
        private ObjectSet<Block> _blocks;
    
        public ObjectSet<Client> Clients
        {
            get { return _clients  ?? (_clients = CreateObjectSet<Client>("Clients")); }
        }
        private ObjectSet<Client> _clients;
    
        public ObjectSet<ExecutedBlock> ExecutedBlocks
        {
            get { return _executedBlocks  ?? (_executedBlocks = CreateObjectSet<ExecutedBlock>("ExecutedBlocks")); }
        }
        private ObjectSet<ExecutedBlock> _executedBlocks;
    
        public ObjectSet<OrderAllocation> OrderAllocations
        {
            get { return _orderAllocations  ?? (_orderAllocations = CreateObjectSet<OrderAllocation>("OrderAllocations")); }
        }
        private ObjectSet<OrderAllocation> _orderAllocations;
    
        public ObjectSet<Order> Orders
        {
            get { return _orders  ?? (_orders = CreateObjectSet<Order>("Orders")); }
        }
        private ObjectSet<Order> _orders;
    
        public ObjectSet<Portfolio> Portfolios
        {
            get { return _portfolios  ?? (_portfolios = CreateObjectSet<Portfolio>("Portfolios")); }
        }
        private ObjectSet<Portfolio> _portfolios;
    
        public ObjectSet<ProposedBlock> ProposedBlocks
        {
            get { return _proposedBlocks  ?? (_proposedBlocks = CreateObjectSet<ProposedBlock>("ProposedBlocks")); }
        }
        private ObjectSet<ProposedBlock> _proposedBlocks;
    
        public ObjectSet<Security> Securities
        {
            get { return _securities  ?? (_securities = CreateObjectSet<Security>("Securities")); }
        }
        private ObjectSet<Security> _securities;
    
        public ObjectSet<SecurityConfigurationDetail> SecurityConfigurationDetails
        {
            get { return _securityConfigurationDetails  ?? (_securityConfigurationDetails = CreateObjectSet<SecurityConfigurationDetail>("SecurityConfigurationDetails")); }
        }
        private ObjectSet<SecurityConfigurationDetail> _securityConfigurationDetails;
    
        public ObjectSet<Status> Status
        {
            get { return _status  ?? (_status = CreateObjectSet<Status>("Status")); }
        }
        private ObjectSet<Status> _status;
    
        public ObjectSet<User> Users
        {
            get { return _users  ?? (_users = CreateObjectSet<User>("Users")); }
        }
        private ObjectSet<User> _users;
    
        public ObjectSet<UserRole> UserRoles
        {
            get { return _userRoles  ?? (_userRoles = CreateObjectSet<UserRole>("UserRoles")); }
        }
        private ObjectSet<UserRole> _userRoles;

        #endregion
    }
}
